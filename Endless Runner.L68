00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/03/2024 14:39:06

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner
00000000                             3  * Written by : Philip Bourke (modified by Ihor Melashchenko)
00000000                             4  * Date       : 08/03/2024
00000000                             5  * Description: The goal is to jump over obstacles
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00001000                             8      ORG    $1000                ; Origin address of the program
00001000                             9  START:                          ; Label for the beginning of the program
00001000                            10  
00001000                            11  *-----------------------------------------------------------
00001000                            12  * Section       : Welcome Screen
00001000                            13  * Description   : The first screen the player sees
00001000                            14  *-----------------------------------------------------------
00001000                            15  WELCOME_SCREEN:
00001000  3239 0000138E             16       MOVE.W          WELCOME_MESSAGE_WIDTH,  D1   ; Start screen text x position
00001006  3439 00001390             17       MOVE.W          WELCOME_MESSAGE_HEIGHT, D2   ; Start screen text y position
0000100C  0640 005F                 18       ADD.W           #95,                    D0   ; Move string in X 
00001010  0641 0078                 19       ADD.W           #120,                   D1   ; Move string in Y
00001014  43F9 00001392             20       LEA             WELCOME_MESSAGE_1,      A1   ; Load address of welcome message 1
0000101A  4E4F                      21       TRAP            #15                          ; Draw
0000101C                            22       
0000101C  3239 0000138E             23       MOVE.W          WELCOME_MESSAGE_WIDTH,  D1   ; Move to next line
00001022  0641 006C                 24       ADD.W           #108,                   D1   ; Move position right
00001026  0642 0010                 25       ADD.W           #16,                    D2   ; Move position down 
0000102A  43F9 000013AD             26       LEA             WELCOME_MESSAGE_2,      A1   ; Load address of welcome message 2
00001030  4E4F                      27       TRAP            #15                          ; Draw
00001032                            28       
00001032  3239 0000138E             29       MOVE.W          WELCOME_MESSAGE_WIDTH,  D1   ; Move to next line
00001038  0641 00AA                 30       ADD.W           #170,                   D1   ; Move position right 
0000103C  0642 0020                 31       ADD.W           #32,                    D2   ; Move position down 
00001040  43F9 000013DE             32       LEA             WELCOME_MESSAGE_3,      A1   ; Load address of welcome message 3
00001046  4E4F                      33       TRAP            #15                          ; Draw
00001048                            34       
00001048  3239 0000138E             35       MOVE.W          WELCOME_MESSAGE_WIDTH,  D1   ; Move to next line
0000104E  0641 0082                 36       ADD.W           #130,                   D1   ; Move position right
00001052  0642 0010                 37       ADD.W           #16,                    D2   ; Move position down
00001056  43F9 000013E8             38       LEA             WELCOME_MESSAGE_4,      A1   ; Load address of welcome message 4
0000105C  4E4F                      39       TRAP            #15                          ; Draw
0000105E                            40       
0000105E  3239 0000138E             41       MOVE.W          WELCOME_MESSAGE_WIDTH,  D1   ; Move to next line
00001064  0641 009B                 42       ADD.W           #155,                   D1   ; Move position right
00001068  0642 0020                 43       ADD.W           #32,                    D2   ; Move position down
0000106C  43F9 000013F8             44       LEA             WELCOME_MESSAGE_5,      A1   ; Load address of welcome message 5
00001072  4E4F                      45       TRAP            #15                          ; Draw
00001074                            46       
00001074  4E4F                      47       TRAP            #15                          ; Draw
00001076  303C 0005                 48       MOVE            #5,                     D0   ; Input from user
0000107A  4E4F                      49       TRAP            #15                          ; Trap for input
0000107C                            50  
0000107C                            51  *-----------------------------------------------------------
0000107C                            52  * Section       : Trap Codes
0000107C                            53  * Description   : Trap Codes used throughout StarterKit
0000107C                            54  *-----------------------------------------------------------
0000107C                            55  * Trap CODES
0000107C  =00000021                 56  TC_SCREEN   EQU         33          ; Screen size information trap code
0000107C  =00000000                 57  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
0000107C                            58                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
0000107C  =00000013                 59  TC_KEYCODE  EQU         19          ; Check for pressed keys
0000107C  =0000005C                 60  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
0000107C  =0000000B                 61  TC_CURSR_P  EQU         11          ; Trap code cursor position
0000107C  =00000009                 62  TC_EXIT     EQU         09          ; Exit Trapcode
0000107C                            63  
0000107C                            64  *-----------------------------------------------------------
0000107C                            65  * Section       : Character Setup
0000107C                            66  * Description   : Size of Player and Enemy and properties
0000107C                            67  * of these characters e.g Starting Positions and Sizes
0000107C                            68  *-----------------------------------------------------------
0000107C  =00000008                 69  PLYR_W_INIT EQU         08          ; Players initial Width
0000107C  =00000008                 70  PLYR_H_INIT EQU         08          ; Players initial Height
0000107C                            71  
0000107C  =00000000                 72  PLYR_DFLT_V EQU         00          ; Default Player Velocity
0000107C  =FFFFFFEC                 73  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
0000107C  =00000001                 74  PLYR_DFLT_G EQU         01          ; Player Default Gravity
0000107C                            75  
0000107C  =00000001                 76  GND_TRUE    EQU         01          ; Player on Ground True
0000107C  =00000000                 77  GND_FALSE   EQU         00          ; Player on Ground False
0000107C                            78  
0000107C  =00000008                 79  ENMY_W_INIT EQU         08          ; Enemy initial Width
0000107C  =0000012C                 80  ENMY_H_INIT EQU         300          ; Enemy initial Height
0000107C                            81  
0000107C                            82  *-----------------------------------------------------------
0000107C                            83  * Section       : Game Stats
0000107C                            84  * Description   : Points
0000107C                            85  *-----------------------------------------------------------
0000107C  =00000001                 86  POINTS      EQU         01          ; Points added
0000107C                            87  
0000107C                            88  *-----------------------------------------------------------
0000107C                            89  * Section       : Keyboard Keys
0000107C                            90  * Description   : Spacebar and Escape or two functioning keys
0000107C                            91  * Spacebar to JUMP and Escape to Exit Game
0000107C                            92  *-----------------------------------------------------------
0000107C  =00000020                 93  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
0000107C  =0000001B                 94  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
0000107C                            95  
0000107C                            96  *-----------------------------------------------------------
0000107C                            97  * Subroutine    : Initialise
0000107C                            98  * Description   : Initialise game data into memory such as 
0000107C                            99  * sounds and screen size
0000107C                           100  *-----------------------------------------------------------
0000107C                           101  INITIALISE:
0000107C                           102      ; Screen Size
0000107C  103C 0021                103      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001080  7200                     104      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001082  4E4F                     105      TRAP    #15                     ; interpret D0 and D1 for screen size
00001084  33C1 0000141A            106      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000108A  4841                     107      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000108C  33C1 00001418            108      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001092                           109  
00001092                           110      ; Place the Player at the center of the screen
00001092  4281                     111      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001094  3239 00001418            112      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000109A  82FC 0002                113      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000109E  23C1 00001420            114      MOVE.L  D1,         PLAYER_X    ; Players X Position
000010A4                           115  
000010A4  4281                     116      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010A6  3239 0000141A            117      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010AC  82FC 0002                118      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010B0  23C1 00001424            119      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
000010B6                           120  
000010B6                           121      ; Initialise Player Score
000010B6  4281                     122      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010B8  7200                     123      MOVE.L  #00,        D1          ; Init Score
000010BA  23C1 00001428            124      MOVE.L  D1,         PLAYER_SCORE
000010C0                           125  
000010C0                           126      ; Initialise Player Velocity
000010C0  4281                     127      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C2  123C 0000                128      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
000010C6  23C1 0000142C            129      MOVE.L  D1,         PLYR_VELOCITY
000010CC                           130  
000010CC                           131      ; Initialise Player Gravity
000010CC  4281                     132      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010CE  7201                     133      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
000010D0  23C1 00001430            134      MOVE.L  D1,         PLYR_GRAVITY
000010D6                           135  
000010D6                           136      ; Initialize Player on Ground
000010D6  23FC 00000001 00001434   137      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
000010E0                           138  
000010E0                           139      ; Initial Position for Enemy
000010E0  4281                     140      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E2  3239 00001418            141      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010E8  23C1 00001438            142      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000010EE                           143  
000010EE  4281                     144      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010F0  3239 0000141A            145      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010F6  82FC 0002                146      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010FA  23C1 0000143C            147      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001100                           148  
00001100                           149      ; Enable the screen back buffer(see easy 68k help)
00001100  103C 005C                150      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001104  123C 0011                151      MOVE.B  #17,        D1          ; Combine Tasks
00001108  4E4F                     152      TRAP    #15                     ; Trap (Perform action)
0000110A                           153  
0000110A                           154      ; Clear the screen (see easy 68k help)
0000110A  103C 000B                155      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000110E  323C FF00                156      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001112  4E4F                     157      TRAP    #15                     ; Trap (Perform action)
00001114                           158  
00001114                           159  *-----------------------------------------------------------
00001114                           160  * Subroutine    : Game
00001114                           161  * Description   : Game including main GameLoop. GameLoop is like
00001114                           162  * a while loop in that it runs forever until interupted
00001114                           163  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001114                           164  *-----------------------------------------------------------
00001114                           165  GAMELOOP:
00001114                           166      ; Main Gameloop
00001114  6100 001E                167      BSR     INPUT                   ; Check Keyboard Input
00001118  6100 0060                168      BSR     UPDATE                  ; Update positions and points
0000111C  6100 00FE                169      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
00001120  6100 01D4                170      BSR     CHECK_COLLISIONS        ; Check for Collisions
00001124  6100 00A8                171      BSR     DRAW                    ; Draw the Scene
00001128                           172      
00001128                           173      ; Introduce delay to slow down the game
00001128  203C 000003E8            174      MOVE.L  #1000, D0            ; Delay value (adjust as needed)
0000112E                           175  DELAY_LOOP:
0000112E  5380                     176      SUBQ.L  #1, D0                  ; Decrement delay counter
00001130  66FC                     177      BNE     DELAY_LOOP              ; Loop until delay counter is zero
00001132                           178      
00001132  60E0                     179      BRA     GAMELOOP                ; Loop back to GameLoop
00001134                           180  
00001134                           181  *-----------------------------------------------------------
00001134                           182  * Subroutine    : Input
00001134                           183  * Description   : Process Keyboard Input
00001134                           184  *-----------------------------------------------------------
00001134                           185  INPUT:
00001134                           186      ; Process Input
00001134  4281                     187      CLR.L   D1                      ; Clear Data Register
00001136  103C 0013                188      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000113A  4E4F                     189      TRAP    #15                     ; Trap (Perform action)
0000113C  1401                     190      MOVE.B  D1,         D2          ; Move last key D1 to D2
0000113E  B43C 0000                191      CMP.B   #00,        D2          ; Key is pressed
00001142  6700 000E                192      BEQ     PROCESS_INPUT           ; Process Key
00001146  4E4F                     193      TRAP    #15                     ; Trap for Last Key
00001148                           194      ; Check if key still pressed
00001148  B23C 00FF                195      CMP.B   #$FF,       D1          ; Is it still pressed
0000114C  6700 0004                196      BEQ     PROCESS_INPUT           ; Process Last Key
00001150  4E75                     197      RTS                             ; Return to subroutine
00001152                           198  
00001152                           199  *-----------------------------------------------------------
00001152                           200  * Subroutine    : Process Input
00001152                           201  * Description   : Branch based on keys pressed
00001152                           202  *-----------------------------------------------------------
00001152                           203  PROCESS_INPUT:
00001152  23C2 0000141C            204      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00001158  0CB9 0000001B 0000141C   205      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
00001162  6700 0210                206      BEQ     EXIT                    ; Exit if Escape
00001166  0CB9 00000020 0000141C   207      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
00001170  6700 00FE                208      BEQ     JUMP                    ; Jump
00001174  6000 011A                209      BRA     IDLE                    ; Or Idle
00001178  4E75                     210      RTS                             ; Return to subroutine
0000117A                           211  
0000117A                           212  *-----------------------------------------------------------
0000117A                           213  * Subroutine    : Update
0000117A                           214  * Description   : Main update loop update Player and Enemies
0000117A                           215  *-----------------------------------------------------------
0000117A                           216  UPDATE:
0000117A                           217      ; Update the Players Positon based on Velocity and Gravity
0000117A  4281                     218      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000117C  2239 0000142C            219      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
00001182  2439 00001430            220      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001188  D282                     221      ADD.L   D2,         D1          ; Add Gravity to Velocity
0000118A  23C1 0000142C            222      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
00001190  D2B9 00001424            223      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001196  23C1 00001424            224      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
0000119C                           225  
0000119C                           226      ; Move the Enemy
0000119C  4281                     227      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000119E  4281                     228      CLR.L   D1                      ; Clear the contents of D0
000011A0  2239 00001438            229      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
000011A6  B2BC 00000000            230      CMP.L   #00,        D1
000011AC  6F00 0010                231      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
000011B0  6000 0004                232      BRA     MOVE_ENEMY              ; Move the Enemy
000011B4                           233  
000011B4  4E75                     234      RTS                             ; Return to subroutine  
000011B6                           235  
000011B6                           236  *-----------------------------------------------------------
000011B6                           237  * Subroutine    : Move Enemy
000011B6                           238  * Description   : Move Enemy Right to Left
000011B6                           239  *-----------------------------------------------------------
000011B6                           240  MOVE_ENEMY:
000011B6  53B9 00001438            241      SUB.L   #01,        ENEMY_X     ; Move enemy by X Value
000011BC  4E75                     242      RTS
000011BE                           243  
000011BE                           244  *-----------------------------------------------------------
000011BE                           245  * Subroutine    : Reset Enemy
000011BE                           246  * Description   : Reset Enemy if to passes 0 to Right of Screen
000011BE                           247  *-----------------------------------------------------------
000011BE                           248  RESET_ENEMY_POSITION:
000011BE  4281                     249      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011C0  3239 00001418            250      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011C6  23C1 00001438            251      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000011CC  4E75                     252      RTS
000011CE                           253  
000011CE                           254  *-----------------------------------------------------------
000011CE                           255  * Subroutine    : Draw
000011CE                           256  * Description   : Draw Screen
000011CE                           257  *-----------------------------------------------------------
000011CE                           258  DRAW: 
000011CE                           259      ; Enable back buffer
000011CE  103C 005E                260      MOVE.B  #94,        D0
000011D2  4E4F                     261      TRAP    #15
000011D4                           262  
000011D4                           263      ; Clear the screen
000011D4  103C 000B                264      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011D8  323C FF00                265      MOVE.W  #$FF00,     D1          ; Clear contents
000011DC  4E4F                     266      TRAP    #15                     ; Trap (Perform action)
000011DE                           267  
000011DE  6100 000C                268      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000011E2  6100 00AE                269      BSR     DRAW_PLAYER             ; Draw Player
000011E6  6100 00DA                270      BSR     DRAW_ENEMY              ; Draw Enemy
000011EA  4E75                     271      RTS                             ; Return to subroutine
000011EC                           272  
000011EC                           273  *-----------------------------------------------------------
000011EC                           274  * Subroutine    : Draw Player Data
000011EC                           275  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011EC                           276  *-----------------------------------------------------------
000011EC                           277  DRAW_PLYR_DATA:
000011EC  4281                     278      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011EE                           279  
000011EE                           280      ; Player Score Message
000011EE  103C 000B                281      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011F2  323C 0201                282      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000011F6  4E4F                     283      TRAP    #15                     ; Trap (Perform action)
000011F8  43F9 00001410            284      LEA     SCORE_MSG,  A1          ; Score Message
000011FE  303C 000D                285      MOVE    #13,        D0          ; No Line feed
00001202  4E4F                     286      TRAP    #15                     ; Trap (Perform action)
00001204                           287  
00001204                           288      ; Player Score Value
00001204  103C 000B                289      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001208  323C 0901                290      MOVE.W  #$0901,     D1          ; Col 09, Row 01
0000120C  4E4F                     291      TRAP    #15                     ; Trap (Perform action)
0000120E  103C 0003                292      MOVE.B  #03,        D0          ; Display number at D1.L
00001212  2239 00001428            293      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001218  4E4F                     294      TRAP    #15                     ; Trap (Perform action)
0000121A  4E75                     295      RTS  
0000121C                           296      
0000121C                           297  *-----------------------------------------------------------
0000121C                           298  * Subroutine    : Player is on Ground
0000121C                           299  * Description   : Check if the Player is on or off Ground
0000121C                           300  *-----------------------------------------------------------
0000121C                           301  IS_PLAYER_ON_GND:
0000121C                           302      ; Check if Player is on Ground
0000121C  4281                     303      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000121E  4282                     304      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001220  3239 0000141A            305      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001226  82FC 0002                306      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000122A  2439 00001424            307      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001230  B441                     308      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001232  6C00 0008                309      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001236  6D00 002C                310      BLT     SET_OFF_GROUND          ; The Player is off the Ground
0000123A  4E75                     311      RTS                             ; Return to subroutine
0000123C                           312  
0000123C                           313  
0000123C                           314  *-----------------------------------------------------------
0000123C                           315  * Subroutine    : On Ground
0000123C                           316  * Description   : Set the Player On Ground
0000123C                           317  *-----------------------------------------------------------
0000123C                           318  SET_ON_GROUND:
0000123C  4281                     319      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000123E  3239 0000141A            320      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001244  82FC 0002                321      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001248  23C1 00001424            322      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
0000124E  4281                     323      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001250  7200                     324      MOVE.L  #00,        D1          ; Player Velocity
00001252  23C1 0000142C            325      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00001258  23FC 00000001 00001434   326      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001262  4E75                     327      RTS
00001264                           328  
00001264                           329  *-----------------------------------------------------------
00001264                           330  * Subroutine    : Off Ground
00001264                           331  * Description   : Set the Player Off Ground
00001264                           332  *-----------------------------------------------------------
00001264                           333  SET_OFF_GROUND:
00001264  23FC 00000000 00001434   334      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
0000126E  4E75                     335      RTS                             ; Return to subroutine
00001270                           336  *-----------------------------------------------------------
00001270                           337  * Subroutine    : Jump
00001270                           338  * Description   : Perform a Jump
00001270                           339  *-----------------------------------------------------------
00001270                           340  JUMP:
00001270  0CB9 00000001 00001434   341      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000127A  6700 0006                342      BEQ     PERFORM_JUMP            ; Do Jump
0000127E  6000 000E                343      BRA     JUMP_DONE               ;
00001282                           344  PERFORM_JUMP:
00001282  23FC FFFFFFEC 0000142C   345      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
0000128C  4E75                     346      RTS                             ; Return to subroutine
0000128E                           347  JUMP_DONE:
0000128E  4E75                     348      RTS                             ; Return to subroutine
00001290                           349  
00001290                           350  *-----------------------------------------------------------
00001290                           351  * Subroutine    : Idle
00001290                           352  * Description   : Perform a Idle
00001290                           353  *----------------------------------------------------------- 
00001290                           354  IDLE:
00001290  4E75                     355      RTS                             ; Return to subroutine
00001292                           356  
00001292                           357  *-----------------------------------------------------------
00001292                           358  * Subroutine    : Draw Player
00001292                           359  * Description   : Draw Player Square
00001292                           360  *-----------------------------------------------------------
00001292                           361  DRAW_PLAYER:
00001292                           362      ; Set Pixel Colors
00001292  223C 0000FF00            363      MOVE.L  #GREEN,     D1          ; Set Background color
00001298  103C 0050                364      MOVE.B  #80,        D0          ; Task for Background Color
0000129C  4E4F                     365      TRAP    #15                     ; Trap (Perform action)
0000129E                           366  
0000129E                           367      ; Set X, Y, Width and Height
0000129E  2239 00001420            368      MOVE.L  PLAYER_X,   D1          ; X
000012A4  2439 00001424            369      MOVE.L  PLAYER_Y,   D2          ; Y
000012AA  2639 00001420            370      MOVE.L  PLAYER_X,   D3
000012B0  5083                     371      ADD.L   #PLYR_W_INIT,   D3      ; Width
000012B2  2839 00001424            372      MOVE.L  PLAYER_Y,   D4 
000012B8  5084                     373      ADD.L   #PLYR_H_INIT,   D4      ; Height
000012BA                           374      
000012BA                           375      ; Draw Player
000012BA  103C 0057                376      MOVE.B  #87,        D0          ; Draw Player
000012BE  4E4F                     377      TRAP    #15                     ; Trap (Perform action)
000012C0  4E75                     378      RTS                             ; Return to subroutine
000012C2                           379  
000012C2                           380  *-----------------------------------------------------------
000012C2                           381  * Subroutine    : Draw Enemy
000012C2                           382  * Description   : Draw Enemy Square
000012C2                           383  *-----------------------------------------------------------
000012C2                           384  DRAW_ENEMY:
000012C2                           385      ; Set Pixel Colors
000012C2  223C 000000FF            386      MOVE.L  #RED,       D1          ; Set Background color
000012C8  103C 0050                387      MOVE.B  #80,        D0          ; Task for Background Color
000012CC  4E4F                     388      TRAP    #15                     ; Trap (Perform action)
000012CE                           389  
000012CE                           390      ; Set X, Y, Width and Height
000012CE  2239 00001438            391      MOVE.L  ENEMY_X,    D1          ; X
000012D4  2439 0000143C            392      MOVE.L  ENEMY_Y,    D2          ; Y
000012DA  2639 00001438            393      MOVE.L  ENEMY_X,    D3
000012E0  5083                     394      ADD.L   #ENMY_W_INIT,   D3      ; Width
000012E2  2839 0000143C            395      MOVE.L  ENEMY_Y,    D4 
000012E8  0684 0000012C            396      ADD.L   #ENMY_H_INIT,   D4      ; Height
000012EE                           397      
000012EE                           398      ; Draw Enemy    
000012EE  103C 0057                399      MOVE.B  #87,        D0          ; Draw Enemy
000012F2  4E4F                     400      TRAP    #15                     ; Trap (Perform action)
000012F4  4E75                     401      RTS                             ; Return to subroutine
000012F6                           402  
000012F6                           403  *-----------------------------------------------------------
000012F6                           404  * Subroutine    : Collision Check
000012F6                           405  * Description   : Axis-Aligned Bounding Box Collision Detection
000012F6                           406  * Algorithm checks for overlap on the 4 sides of the Player and 
000012F6                           407  * Enemy rectangles
000012F6                           408  * PLAYER_X <= ENEMY_X + ENEMY_W &&
000012F6                           409  * PLAYER_X + PLAYER_W >= ENEMY_X &&
000012F6                           410  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
000012F6                           411  * PLAYER_H + PLAYER_Y >= ENEMY_Y
000012F6                           412  *-----------------------------------------------------------
000012F6                           413  CHECK_COLLISIONS:
000012F6  4281                     414      CLR.L   D1                      ; Clear D1
000012F8  4282                     415      CLR.L   D2                      ; Clear D2
000012FA                           416  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
000012FA  2239 00001420            417      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001300  2439 00001438            418      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001306  D4B8 0008                419      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000130A  B481                     420      CMP.L   D1,         D2          ; Do the Overlap ?
0000130C  6F00 0006                421      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001310  6000 0044                422      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001314                           423  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001314  D2B8 0008                424      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001318  2439 00001438            425      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000131E  B481                     426      CMP.L   D1,         D2          ; Do they OverLap ?
00001320  6C00 0006                427      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00001324  6000 0030                428      BRA     COLLISION_CHECK_DONE    ; If not no collision   
00001328                           429  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00001328  2239 00001424            430      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000132E  2439 0000143C            431      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00001334  D4B8 012C                432      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001338  B481                     433      CMP.L   D1,         D2          ; Do they Overlap ?
0000133A  6F00 0006                434      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
0000133E  6000 0016                435      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001342                           436  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001342  D2B8 0008                437      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001346  2439 0000143C            438      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
0000134C  B481                     439      CMP.L   D1,         D2          ; Do they OverLap ?
0000134E  6C00 0016                440      BGE     COLLISION               ; Collision !
00001352  6000 0002                441      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001356                           442  COLLISION_CHECK_DONE:               ; No Collision Update points
00001356  5281                     443      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001358  D2B9 00001428            444      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000135E  23C1 00001428            445      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001364  4E75                     446      RTS                             ; Return to subroutine
00001366                           447  
00001366                           448  COLLISION:
00001366  23FC 00000000 00001428   449      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
00001370                           450  
00001370  FFFF FFFF                451      SIMHALT                         ; Stop the game
00001374                           452      
00001374                           453  
00001374                           454  *-----------------------------------------------------------
00001374                           455  * Subroutine    : EXIT
00001374                           456  * Description   : Exit message and End Game
00001374                           457  *-----------------------------------------------------------
00001374                           458  EXIT:
00001374                           459      ; Show if Exiting is Running
00001374  103C 000B                460      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001378  323C 4004                461      MOVE.W  #$4004,     D1          ; Col 40, Row 1
0000137C  4E4F                     462      TRAP    #15                     ; Trap (Perform action)
0000137E  303C 000D                463      MOVE    #13,        D0          ; No Line feed
00001382  4E4F                     464      TRAP    #15                     ; Trap (Perform action)
00001384  103C 0009                465      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001388  4E4F                     466      TRAP    #15                     ; Trap (Perform action)
0000138A  FFFF FFFF                467      SIMHALT
0000138E                           468  
0000138E                           469  *-----------------------------------------------------------
0000138E                           470  * Section       : Messages
0000138E                           471  * Description   : Messages to Print on Console, names should be
0000138E                           472  * self documenting
0000138E                           473  *-----------------------------------------------------------
0000138E= 0064                     474  WELCOME_MESSAGE_WIDTH        DC.W            100    ; X position
00001390= 00B4                     475  WELCOME_MESSAGE_HEIGHT       DC.W            180    ; Y position
00001392= 57 65 6C 63 6F 6D ...    476  WELCOME_MESSAGE_1            DC.B            'Welcome to Endless Runner!',0             
000013AD= 54 68 65 20 67 6F ...    477  WELCOME_MESSAGE_2            DC.B            'The goal of this game is to jump over obstacles.',0           
000013DE= 43 6F 6E 74 72 6F ...    478  WELCOME_MESSAGE_3            DC.B            'Controls:',0                                      
000013E8= 22 53 70 61 63 65 ...    479  WELCOME_MESSAGE_4            DC.B            '"Space" to jump',0        
000013F8= 50 72 65 73 73 20 ...    480  WELCOME_MESSAGE_5            DC.B            'Press "Enter" to start!',0    
00001410                           481  SIMHALT
00001410                           482  
00001410= 53 63 6F 72 65 3A ...    483  SCORE_MSG                    DC.B    'Score: ', 0       ; Score Message
00001418                           484  
00001418                           485  *-----------------------------------------------------------
00001418                           486  * Section       : Graphic Colors
00001418                           487  * Description   : Screen Pixel Color
00001418                           488  *-----------------------------------------------------------
00001418  =00FFFFFF                489  WHITE           EQU     $00FFFFFF
00001418  =000000FF                490  RED             EQU     $000000FF
00001418  =0000FF00                491  GREEN           EQU     $0000FF00
00001418  =00FF0000                492  BLUE            EQU     $00FF0000   
00001418                           493  
00001418                           494  *-----------------------------------------------------------
00001418                           495  * Section       : Screen Size
00001418                           496  * Description   : Screen Width and Height
00001418                           497  *-----------------------------------------------------------
00001418                           498  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
0000141A                           499  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
0000141C                           500  
0000141C                           501  *-----------------------------------------------------------
0000141C                           502  * Section       : Keyboard Input
0000141C                           503  * Description   : Used for storing Keypresses
0000141C                           504  *-----------------------------------------------------------
0000141C                           505  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001420                           506  
00001420                           507  *-----------------------------------------------------------
00001420                           508  * Section       : Character Positions
00001420                           509  * Description   : Player and Enemy Position Memory Locations
00001420                           510  *-----------------------------------------------------------
00001420                           511  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001424                           512  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001428                           513  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
0000142C                           514  
0000142C                           515  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001430                           516  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001434                           517  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001438                           518  
00001438                           519  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
0000143C                           520  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001440                           521  
00001440                           522      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BLUE                FF0000
CHECK_COLLISIONS    12F6
COLLISION           1366
COLLISION_CHECK_DONE  1356
CURRENT_KEY         141C
DELAY_LOOP          112E
DRAW                11CE
DRAW_ENEMY          12C2
DRAW_PLAYER         1292
DRAW_PLYR_DATA      11EC
ENEMY_X             1438
ENEMY_Y             143C
ENMY_H_INIT         12C
ENMY_W_INIT         8
ESCAPE              1B
EXIT                1374
GAMELOOP            1114
GND_FALSE           0
GND_TRUE            1
GREEN               FF00
IDLE                1290
INITIALISE          107C
INPUT               1134
IS_PLAYER_ON_GND    121C
JUMP                1270
JUMP_DONE           128E
MOVE_ENEMY          11B6
PERFORM_JUMP        1282
PLAYER_SCORE        1428
PLAYER_X            1420
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  12FA
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1314
PLAYER_Y            1424
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  1328
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1342
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1430
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         1434
PLYR_VELOCITY       142C
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       1152
RED                 FF
RESET_ENEMY_POSITION  11BE
SCORE_MSG           1410
SCREEN_H            141A
SCREEN_W            1418
SET_OFF_GROUND      1264
SET_ON_GROUND       123C
SIMHALT             1410
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              117A
WELCOME_MESSAGE_1   1392
WELCOME_MESSAGE_2   13AD
WELCOME_MESSAGE_3   13DE
WELCOME_MESSAGE_4   13E8
WELCOME_MESSAGE_5   13F8
WELCOME_MESSAGE_HEIGHT  1390
WELCOME_MESSAGE_WIDTH  138E
WELCOME_SCREEN      1000
WHITE               FFFFFF
